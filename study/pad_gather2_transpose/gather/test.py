import gather_test
import torch
import numpy as np
import os
os.environ[ 'CUDA_VISIBLE_DEVICES']="7"

def test_func():
    print('hello, run here\n')
    data = np.random.randn(1, 3, 228, 228).astype(np.float16)
    indices = np.array([[
        0,
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220
    ],
    [
        1,
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221
    ],
    [
        2,
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222
    ],
    [
        3,
        7,
        11,
        15,
        19,
        23,
        27,
        31,
        35,
        39,
        43,
        47,
        51,
        55,
        59,
        63,
        67,
        71,
        75,
        79,
        83,
        87,
        91,
        95,
        99,
        103,
        107,
        111,
        115,
        119,
        123,
        127,
        131,
        135,
        139,
        143,
        147,
        151,
        155,
        159,
        163,
        167,
        171,
        175,
        179,
        183,
        187,
        191,
        195,
        199,
        203,
        207,
        211,
        215,
        219,
        223
    ],
    [
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220,
        224
    ],
    [
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221,
        225
    ],
    [
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222,
        226
    ]
])

    y = np.take(data, indices, axis=2)

    input = torch.tensor(data).cuda()
    indice = torch.tensor(indices)
    output = torch.tensor(y).cuda()

    # print('input shape: ', input.shape)
    # print('output shape: ', output.shape)

    # print('\n')
    print('from input and indice data to output data\n')
    out_test = torch.zeros_like(output)
    
    for i in range(input.shape[0]):
        for j in range(input.shape[1]):
            for k in range(indice.shape[0]):
                for m in range(indice.shape[1]):
                    for n in range(input.shape[3]):
                        # out_test[i][j][k][m][n] = input[i][j][indice[k][m]][n]

                        out_index = i *input.shape[1] * indice.shape[0]* indice.shape[1]*input.shape[3]  \
                                    + j *indice.shape[0]* indice.shape[1]*input.shape[3]                  \
                                    + k * indice.shape[1]*input.shape[3] + m*input.shape[3] + n

                        indice_index = 56*k + m
                        indice_data = indice.flatten()[indice_index]

                        in_index = n + 228*indice_data + 228*228*j + 3*228*228*i

                        out_test.flatten()[out_index] = input.flatten()[in_index]


    diff_test = torch.abs(output.flatten() - out_test.flatten())

    print('diff test max: ',diff_test.max())
    print('output shape:',output.shape)
    print('out_test shape:',out_test.shape)

def test():
    print('hello, run here\n')
    data = np.random.randn(1, 3, 228, 228).astype(np.float16)
    indices = np.array([[
        0,
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220
    ],
    [
        1,
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221
    ],
    [
        2,
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222
    ],
    [
        3,
        7,
        11,
        15,
        19,
        23,
        27,
        31,
        35,
        39,
        43,
        47,
        51,
        55,
        59,
        63,
        67,
        71,
        75,
        79,
        83,
        87,
        91,
        95,
        99,
        103,
        107,
        111,
        115,
        119,
        123,
        127,
        131,
        135,
        139,
        143,
        147,
        151,
        155,
        159,
        163,
        167,
        171,
        175,
        179,
        183,
        187,
        191,
        195,
        199,
        203,
        207,
        211,
        215,
        219,
        223
    ],
    [
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220,
        224
    ],
    [
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221,
        225
    ],
    [
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222,
        226
    ]
])

    y = np.take(data, indices, axis=2)

    input = torch.tensor(data).cuda()
    indice = torch.tensor(indices.astype(np.int32)).cuda()
    output = torch.tensor(y).cuda()

    # print('input shape: ', input.shape)
    # print('output shape: ', output.shape)
    print('indice:', indice.flatten())

    # print('\n')
    print('from input and indice data to output data\n')
    out_test = gather_test.test_gather(input, indice)
    
    diff_test = torch.abs(output.flatten() - out_test.flatten())

    print('diff test max: ',diff_test.max())
    print('output shape:',output.shape)
    print('out_test shape:',out_test.shape)
    # print('output flatten()[:228*2]:',output.flatten()[:228*2])
    # print('out_test flatten()[:228*2]:',out_test.flatten()[:228*2])
                    
def test_5_6():
    print('hello, run here\n')
    data = np.random.randn(1, 3, 7, 56, 228).astype(np.float16)
    indices = np.array([
    [
        0,
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220
    ],
    [
        1,
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221
    ],
    [
        2,
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222
    ],
    [
        3,
        7,
        11,
        15,
        19,
        23,
        27,
        31,
        35,
        39,
        43,
        47,
        51,
        55,
        59,
        63,
        67,
        71,
        75,
        79,
        83,
        87,
        91,
        95,
        99,
        103,
        107,
        111,
        115,
        119,
        123,
        127,
        131,
        135,
        139,
        143,
        147,
        151,
        155,
        159,
        163,
        167,
        171,
        175,
        179,
        183,
        187,
        191,
        195,
        199,
        203,
        207,
        211,
        215,
        219,
        223
    ],
    [
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220,
        224
    ],
    [
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221,
        225
    ],
    [
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222,
        226
    ]
]
)

    y = np.take(data, indices, axis=4)

    input = torch.tensor(data).cuda()
    indice = torch.tensor(indices.astype(np.int32)).cuda()
    output = torch.tensor(y).cuda()

    # print('input shape: ', input.shape)
    # print('output shape: ', output.shape)
    # print('indice:', indice.flatten())

    # print('\n')
    print('from input and indice data to output data\n')
    out_test = gather_test.test_gather(input, indice)
    
    diff_test = torch.abs(output.flatten() - out_test.flatten())

    print('diff test max: ',diff_test.max())
    print('output shape:',output.shape)
    print('out_test shape:',out_test.shape)
    # print('output flatten()[:228*2]:',output.flatten()[:228*2])
    # print('out_test flatten()[:228*2]:',out_test.flatten()[:228*2])


if __name__ =='__main__':
    np.random.seed(123)
    torch.manual_seed(123)
    torch.cuda.manual_seed_all(123)
    # test_func()
    # test()
    test_5_6()
