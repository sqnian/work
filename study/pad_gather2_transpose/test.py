import numpy as np
import torch
import pg2t_test 
import os
os.environ['CUDA_VISIBLE_DEVICES']="1"


def pad_impl(data, raw_pads, mode, constant_values=0.0, axes=None):  # type: ignore
    input_rank = data.ndim
    if axes is None:
        axes = list(range(input_rank))
    else:
        axes = [axis if axis >= 0 else axis + input_rank for axis in axes]
    num_axes = len(axes)

    if num_axes * 2 != raw_pads.size:
        raise Exception("The number of elements in raw_pads should be 2 * num_axes")

    pad_width = []
    for _ in range(input_rank):
        pad_width += [[0, 0]]  # init to zero

    # re-order to np.pad accepted order ((x1_begin, x1_end), (x2_begin, x2_end), ...)
    for i in range(num_axes):
        axis = axes[i]
        if axis < 0:
            axis = input_rank + axis
        pad_width[axis] = [raw_pads[i], raw_pads[i + num_axes]]

    if mode == "constant":
        y = np.pad(
            data,
            pad_width=pad_width,
            mode=mode,
            constant_values=constant_values,
        )
        return y

    y = np.pad(
        data,
        pad_width=pad_width,
        mode=mode,
    )

    return y


def test_3():
    print('hello, run here\n')
    # 1.pad
    x = np.random.randn(64,3,224, 224).astype(np.float16)
    print('x shape: ', x.shape)
    input = torch.tensor(x).cuda()
    pads = np.array([0,0,2, 2,0,0, 2, 2]).astype(np.int64)
    y_pad = pad_impl(x, pads,"constant") 
    print('y_pad shape: ', y_pad.shape)

    # 2. gather one
    indices_gather1 = np.array([[
        0,
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220
    ],
    [
        1,
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221
    ],
    [
        2,
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222
    ],
    [
        3,
        7,
        11,
        15,
        19,
        23,
        27,
        31,
        35,
        39,
        43,
        47,
        51,
        55,
        59,
        63,
        67,
        71,
        75,
        79,
        83,
        87,
        91,
        95,
        99,
        103,
        107,
        111,
        115,
        119,
        123,
        127,
        131,
        135,
        139,
        143,
        147,
        151,
        155,
        159,
        163,
        167,
        171,
        175,
        179,
        183,
        187,
        191,
        195,
        199,
        203,
        207,
        211,
        215,
        219,
        223
    ],
    [
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220,
        224
    ],
    [
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221,
        225
    ],
    [
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222,
        226
    ]
])

    y_gather1 = np.take(y_pad, indices_gather1, axis=2)
    print('y_gather1 shape: ', y_gather1.shape)

    # 3. gather two 
    indices_gather2 = np.array([
    [
        0,
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220
    ],
    [
        1,
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221
    ],
    [
        2,
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222
    ],
    [
        3,
        7,
        11,
        15,
        19,
        23,
        27,
        31,
        35,
        39,
        43,
        47,
        51,
        55,
        59,
        63,
        67,
        71,
        75,
        79,
        83,
        87,
        91,
        95,
        99,
        103,
        107,
        111,
        115,
        119,
        123,
        127,
        131,
        135,
        139,
        143,
        147,
        151,
        155,
        159,
        163,
        167,
        171,
        175,
        179,
        183,
        187,
        191,
        195,
        199,
        203,
        207,
        211,
        215,
        219,
        223
    ],
    [
        4,
        8,
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220,
        224
    ],
    [
        5,
        9,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        41,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        73,
        77,
        81,
        85,
        89,
        93,
        97,
        101,
        105,
        109,
        113,
        117,
        121,
        125,
        129,
        133,
        137,
        141,
        145,
        149,
        153,
        157,
        161,
        165,
        169,
        173,
        177,
        181,
        185,
        189,
        193,
        197,
        201,
        205,
        209,
        213,
        217,
        221,
        225
    ],
    [
        6,
        10,
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        178,
        182,
        186,
        190,
        194,
        198,
        202,
        206,
        210,
        214,
        218,
        222,
        226
    ]
]
)

    y_gather2 = np.take(y_gather1, indices_gather2, axis=4)
    print('y_gather2 shape: ', y_gather2.shape)
    # 4. transpose
    y_gather2_tensor = torch.tensor(y_gather2)
    y_res = y_gather2_tensor.permute(0,1,2,4,3,5).contiguous()
    print('y_res shape: ', y_res.shape)

    # op test
    input = torch.tensor(x).cuda()
    input_pad = torch.tensor(y_pad).cuda()
    indices_gather1_tensor = torch.tensor(indices_gather1.astype(np.int32)).cuda()
    indices_gather2_tensor = torch.tensor(indices_gather2.astype(np.int32)).cuda()
    output = y_res.cuda()
    out_test = pg2t_test.test_pg2t(input, indices_gather1_tensor, indices_gather2_tensor)

    diff_test = torch.abs(output.flatten() - out_test.flatten())
    print('diff test max: ',diff_test.max())
    print('output shape:',output.shape)
    print('out_test shape:',out_test.shape)



def test_64():
    print('hello, run test_64 \n')
    # 1.pad
    x = np.random.randn(1,64,56, 56).astype(np.float16)
    print('x shape: ', x.shape)
    input = torch.tensor(x).cuda()
    pads = np.array([0,0,1,1,0,0,1,1]).astype(np.int64)
    y_pad = pad_impl(x, pads,"constant") 
    print('y_pad shape: ', y_pad.shape)

    # 2. gather one
    indices_gather1 = np.array([
    [
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54
    ],
    [
        1,
        3,
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        43,
        45,
        47,
        49,
        51,
        53,
        55
    ],
    [
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56
    ]
    ])

    y_gather1 = np.take(y_pad, indices_gather1, axis=2)
    print('y_gather1 shape: ', y_gather1.shape)

    # 3. gather two 
    indices_gather2 = np.array([
    [
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54
    ],
    [
        1,
        3,
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        43,
        45,
        47,
        49,
        51,
        53,
        55
    ],
    [
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56
    ]])

    y_gather2 = np.take(y_gather1, indices_gather2, axis=4)
    print('y_gather2 shape: ', y_gather2.shape)
    # 4. transpose
    y_gather2_tensor = torch.tensor(y_gather2)
    y_res = y_gather2_tensor.permute(0,1,2,4,3,5).contiguous()
    print('y_res shape: ', y_res.shape)

    # op test
    input = torch.tensor(x).cuda()
    input_pad = torch.tensor(y_pad).cuda()
    indices_gather1_tensor = torch.tensor(indices_gather1.astype(np.int32)).cuda()
    indices_gather2_tensor = torch.tensor(indices_gather2.astype(np.int32)).cuda()
    y_gather1_tensor = torch.tensor(y_gather1).cuda()
    y_gather2_tensor = torch.tensor(y_gather2).cuda()

    output = y_res.cuda()
    out_test = pg2t_test.test_pg2t(input, indices_gather1_tensor, indices_gather2_tensor)

    diff_test = torch.abs(output.flatten() - out_test.flatten())
    print('diff test max: ',diff_test.max())
    print('output shape:',output.shape)
    print('out_test shape:',out_test.shape)

def test_28():
    print('hello, run test_28 \n')
    # 1.pad
    x = np.random.randn(64,64,28, 28).astype(np.float16)
    print('x shape: ', x.shape)
    input = torch.tensor(x).cuda()
    pads = np.array([0,0,1,1,0,0,1,1]).astype(np.int64)
    y_pad = pad_impl(x, pads,"constant") 
    print('y_pad shape: ', y_pad.shape)

    # 2. gather one
    indices_gather1 = np.array([
    [
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26
    ],
    [
        1,
        3,
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27
    ],
    [
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28
    ]
])

    y_gather1 = np.take(y_pad, indices_gather1, axis=2)
    print('y_gather1 shape: ', y_gather1.shape)

    # 3. gather two 
    indices_gather2 = np.array([
    [
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26
    ],
    [
        1,
        3,
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27
    ],
    [
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28
    ]
])

    y_gather2 = np.take(y_gather1, indices_gather2, axis=4)
    print('y_gather2 shape: ', y_gather2.shape)
    # 4. transpose
    y_gather2_tensor = torch.tensor(y_gather2)
    y_res = y_gather2_tensor.permute(0,1,2,4,3,5).contiguous()
    print('y_res shape: ', y_res.shape)

    # op test
    input = torch.tensor(x).cuda()
    input_pad = torch.tensor(y_pad).cuda()
    indices_gather1_tensor = torch.tensor(indices_gather1.astype(np.int32)).cuda()
    indices_gather2_tensor = torch.tensor(indices_gather2.astype(np.int32)).cuda()
    y_gather1_tensor = torch.tensor(y_gather1).cuda()
    y_gather2_tensor = torch.tensor(y_gather2).cuda()

    output = y_res.cuda()
    out_test = pg2t_test.test_pg2t(input, indices_gather1_tensor, indices_gather2_tensor)

    diff_test = torch.abs(output.flatten() - out_test.flatten())
    print('diff test max: ',diff_test.max())
    print('output shape:',output.shape)
    print('out_test shape:',out_test.shape)

if __name__ == '__main__':
    # test_3()
    # test_64()
    test_28()

